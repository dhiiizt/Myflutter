package com.example.getapp

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.DocumentsContract
<<<<<<< HEAD
=======
import androidx.documentfile.provider.DocumentFile
>>>>>>> 88033a8 (Initial commit)
import io.flutter.embedding.android.FlutterActivity
import io.flutter.plugin.common.MethodChannel
import rikka.shizuku.Shizuku
import rikka.shizuku.Shizuku.OnRequestPermissionResultListener
<<<<<<< HEAD

class MainActivity: FlutterActivity() {
=======
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.IOException

class MainActivity : FlutterActivity() {
>>>>>>> 88033a8 (Initial commit)

    private val CHANNEL = "com.example.getapp/native"
    private var savedTreeUri: String? = null
    private val TREE_REQUEST_CODE = 1234
    private var pendingResult: MethodChannel.Result? = null

    // === Tambahan untuk Shizuku ===
    private var shizukuPermissionResult: MethodChannel.Result? = null
<<<<<<< HEAD
    private val shizukuPermissionListener = OnRequestPermissionResultListener { requestCode, grantResult ->
        if (requestCode == 1000) {
            Handler(Looper.getMainLooper()).post {
                shizukuPermissionResult?.success(grantResult == PackageManager.PERMISSION_GRANTED)
                shizukuPermissionResult = null
            }
        }
    }
=======
    private val shizukuPermissionListener =
        OnRequestPermissionResultListener { requestCode, grantResult ->
            if (requestCode == 1000) {
                Handler(Looper.getMainLooper()).post {
                    shizukuPermissionResult?.success(grantResult == PackageManager.PERMISSION_GRANTED)
                    shizukuPermissionResult = null
                }
            }
        }
>>>>>>> 88033a8 (Initial commit)

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val prefs = getSharedPreferences("saf_prefs", Context.MODE_PRIVATE)
        savedTreeUri = prefs.getString("tree_uri", null)

        // Daftarkan listener Shizuku
        Shizuku.addRequestPermissionResultListener(shizukuPermissionListener)

        MethodChannel(flutterEngine!!.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "isAppInstalled" -> {
                    val packageName = call.argument<String>("package") ?: ""
                    result.success(isAppInstalled(packageName))
                }

                "openDocumentTreeForPackage" -> {
                    val packageName = call.argument<String>("package") ?: ""
                    openDocumentTree(packageName, result)
                }

                "getSavedTreeUri" -> result.success(savedTreeUri)

                "clearSavedTreeUri" -> {
                    prefs.edit().remove("tree_uri").apply()
                    savedTreeUri = null
                    result.success(null)
                }

                // === Shizuku bridge ===
                "isShizukuAvailable" -> result.success(isShizukuAvailable())
                "hasShizukuPermission" -> result.success(hasShizukuPermission())
                "requestShizukuPermission" -> requestShizukuPermission(result)
                "execShizukuCommand" -> {
                    val cmd = call.argument<String>("cmd") ?: "id"
                    val resultText = execShizukuCommand(cmd)
                    result.success(resultText)
                }

<<<<<<< HEAD
=======
                // === Copy folder via SAF ===
                "copyDirectoryToSAF" -> {
                    val sourceDir = call.argument<String>("sourceDir")
                    val treeUriStr = call.argument<String>("treeUri")

                    if (sourceDir == null || treeUriStr == null) {
                        result.success(false)
                        return@setMethodCallHandler
                    }

                    try {
                        val treeUri = Uri.parse(treeUriStr)
                        val targetTree = DocumentFile.fromTreeUri(this, treeUri)
                        if (targetTree != null && targetTree.canWrite()) {
                            copyFolderWithSAF(File(sourceDir), targetTree)
                            result.success(true)
                        } else {
                            result.success(false)
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                        result.success(false)
                    }
                }

>>>>>>> 88033a8 (Initial commit)
                else -> result.notImplemented()
            }
        }
    }

    // ==========================================================
    // =============== Bagian Shizuku Permission =================
    // ==========================================================

    private fun isShizukuAvailable(): Boolean {
        return try {
            Shizuku.pingBinder()
        } catch (e: Exception) {
            false
        }
    }

    private fun hasShizukuPermission(): Boolean {
        return Shizuku.checkSelfPermission() == PackageManager.PERMISSION_GRANTED
    }

    private fun requestShizukuPermission(result: MethodChannel.Result) {
        if (!isShizukuAvailable()) {
            result.error("UNAVAILABLE", "Shizuku service not running", null)
            return
        }

        if (hasShizukuPermission()) {
            result.success(true)
            return
        }

        shizukuPermissionResult = result
<<<<<<< HEAD

        // âœ… WAJIB di main thread biar dialog muncul
=======
>>>>>>> 88033a8 (Initial commit)
        Handler(Looper.getMainLooper()).post {
            try {
                Shizuku.requestPermission(1000)
            } catch (e: Exception) {
                result.error("REQUEST_FAILED", e.message, null)
            }
        }
    }

    // ==========================================================
    // =============== Eksekusi Command via Shizuku ==============
    // ==========================================================
    private fun execShizukuCommand(cmd: String): String {
        return try {
            val clazz = Class.forName("rikka.shizuku.Shizuku")
            val method = clazz.getDeclaredMethod(
                "newProcess",
                Array<String>::class.java,
                Array<String>::class.java,
                String::class.java
            )
            method.isAccessible = true

            val process = method.invoke(
                null,
                arrayOf("sh", "-c", cmd),
                null,
                null
            ) as Process

            val output = process.inputStream.bufferedReader().readText()
            val error = process.errorStream.bufferedReader().readText()

            if (error.isNotEmpty()) error else output
<<<<<<< HEAD

=======
>>>>>>> 88033a8 (Initial commit)
        } catch (e: Exception) {
            e.printStackTrace()
            "Error: ${e.message}"
        }
    }

    // ==========================================================
<<<<<<< HEAD
=======
    // =============== Copy folder dengan SAF ===================
    // ==========================================================
    private fun copyFolderWithSAF(source: File, targetTree: DocumentFile) {
    source.listFiles()?.forEach { file ->
        try {
            if (file.isDirectory) {
                // ðŸ”¹ Cek apakah folder dengan nama sama sudah ada
                targetTree.findFile(file.name)?.delete()

                // ðŸ”¹ Buat folder baru
                val subDir = targetTree.createDirectory(file.name)
                if (subDir != null) {
                    copyFolderWithSAF(file, subDir)
                }
            } else {
                // ðŸ”¹ Jika file sudah ada, hapus dulu
                targetTree.findFile(file.name)?.delete()

                // ðŸ”¹ Buat file baru dan tulis datanya
                val newFile = targetTree.createFile("application/octet-stream", file.name)
                if (newFile != null) {
                    contentResolver.openOutputStream(newFile.uri)?.use { output ->
                        FileInputStream(file).use { input ->
                            input.copyTo(output)
                        }
                    }
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}
>>>>>>> 88033a8 (Initial commit)

    private fun isAppInstalled(packageName: String): Boolean {
        return try {
            packageManager.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES)
            true
        } catch (e: PackageManager.NameNotFoundException) {
            false
        }
    }

<<<<<<< HEAD
=======
    // ==========================================================
    // =============== SAF Open Document Tree ===================
    // ==========================================================
>>>>>>> 88033a8 (Initial commit)
    private fun openDocumentTree(packageName: String, result: MethodChannel.Result) {
        pendingResult = result

        val zwj = "%E2%81%A0"
        val baseUri =
            "content://com.android.externalstorage.documents/tree/primary%3AAndroid%2Fdat$zwj" +
                    "a/document/primary%3AAndroid%2Fdat$zwj" +
                    "a%2F"

        val initialUri = Uri.parse(baseUri + Uri.encode(packageName) + "%2F")

        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)
        intent.putExtra("android.provider.extra.INITIAL_URI", initialUri)
        intent.addFlags(
            Intent.FLAG_GRANT_READ_URI_PERMISSION or
                    Intent.FLAG_GRANT_WRITE_URI_PERMISSION or
                    Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION or
                    Intent.FLAG_GRANT_PREFIX_URI_PERMISSION
        )

        startActivityForResult(intent, TREE_REQUEST_CODE)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode == TREE_REQUEST_CODE) {
            val resultUri: String? = if (resultCode == Activity.RESULT_OK && data?.data != null) {
                val uri = data.data!!
                if (isValidMLTreeUri(uri, "com.mobile.legends") ||
<<<<<<< HEAD
                    isValidMLTreeUri(uri, "com.mobile.legends.hwag")) {
=======
                    isValidMLTreeUri(uri, "com.mobile.legends.hwag")
                ) {
>>>>>>> 88033a8 (Initial commit)
                    contentResolver.takePersistableUriPermission(
                        uri,
                        Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION
                    )
                    savedTreeUri = uri.toString()
                    getSharedPreferences("saf_prefs", Context.MODE_PRIVATE)
                        .edit().putString("tree_uri", savedTreeUri).apply()
                    savedTreeUri
                } else null
            } else null

            pendingResult?.success(resultUri)
            pendingResult = null
        }
    }

    companion object {
        fun isValidMLTreeUri(uri: Uri, targetPkg: String): Boolean {
            return try {
                var docId = DocumentsContract.getTreeDocumentId(uri) ?: return false
                docId = docId.replace("\u2060", "").trim()
                val expected = "primary:Android/data/$targetPkg"
                docId == expected || docId == "$expected/"
            } catch (e: Exception) {
                false
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        Shizuku.removeRequestPermissionResultListener(shizukuPermissionListener)
    }
}